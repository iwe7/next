{"version":3,"sources":["services/auth.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,2CAA2C;AAC3C,oEAAgE;AAChE,mCAAoC;AACpC,oCAAoC;AAGpC,IAAa,WAAW,GAAxB;IACI,YAA6B,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IACrD,CAAC;IAOD,KAAK,CAAC,WAAW,CAAC,QAAgB,EAAE,QAAgB;QAChD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC5D,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;SAC1C;QACD,IAAI,IAAI,CAAC,QAAQ,KAAK,mBAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACnF,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC7C;QAED,MAAM,SAAS,GAAG,EAAE,GAAG,EAAE,CAAC;QAC1B,MAAM,WAAW,GAAG,QAAQ,CAAC;QAC7B,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;QAEzD,OAAO;YACH,OAAO,EAAE,SAAS;YAClB,KAAK;SACR,CAAC;IACN,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,UAAU;QAGzB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ,CAAA;AAjCY,WAAW;IADvB,kBAAS,EAAE;qCAEkC,0BAAW;GAD5C,WAAW,CAiCvB;AAjCY,kCAAW","file":"auth.service.js","sourcesContent":["import { Component } from \"@nestjs/common\";\nimport { UserService } from \"@notadd/user/service/user.service\";\nimport { createHash } from \"crypto\";\nimport * as jwt from \"jsonwebtoken\";\n\n@Component()\nexport class AuthService {\n    constructor(private readonly userService: UserService) {\n    }\n\n    /**\n     * @param { string } username\n     * @param { string } password\n     * @returns { Promise<{expires: number; token: string}> }\n     */\n    async createToken(username: string, password: string) {\n        const user = await this.userService.getUserByName(username);\n        if (typeof user === \"undefined\") {\n            throw new Error(\"User Do not exists!\");\n        }\n        if (user.password !== createHash(\"sha256\").update(password + user.salt).digest(\"hex\")) {\n            throw new Error(\"Password is incorrect!\");\n        }\n\n        const expiresIn = 60 * 60;\n        const secretOrKey = \"secret\";\n        const token = jwt.sign(user, secretOrKey, { expiresIn });\n\n        return {\n            expires: expiresIn,\n            token,\n        };\n    }\n\n    async validateUser(signedUser): Promise<boolean> {\n        // put some validation logic here\n        // for example query user by id / email / username\n        return true;\n    }\n}\n"]}