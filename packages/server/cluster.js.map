{"version":3,"sources":["cluster.ts"],"names":[],"mappings":";;AAAA,iDAAqC;AACrC,+BAA4B;AAE5B;IAAA;QACc,cAAS,GAAG,WAAI,CACtB,OAAO,CAAC,GAAG,EAAE,EACb,cAAc,EACd,SAAS,EACT,QAAQ,EACR,cAAc,CACjB,CAAC;IAkDN,CAAC;IA5CU,UAAU;QACb,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;YACtB,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;YACzC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YAClB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;YACvB,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;YAC1C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC3B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,KAAK;QACR,IAAI,CAAC,KAAK,GAAG,oBAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YAC9B,aAAa;YACb,aAAa;SAChB,EAAE;YACC,GAAG,EAAE,OAAO,CAAC,GAAG;YAChB,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE;YAClB,KAAK,EAAE;gBACH,OAAO,CAAC,KAAK;gBACb,OAAO,CAAC,MAAM;gBACd,OAAO,CAAC,MAAM;gBACd,KAAK;aACR;SACJ,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAC1B,OAAO,CAAC,GAAG,CAAC,uBAAuB,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;QAChD,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IAES,OAAO,CAAC,OAA2B;QACzC,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QAC5D,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC5B,QAAQ,OAAO,CAAC,MAAM,EAAE;YACpB,KAAK,SAAS;gBACV,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;gBAC7B,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;gBACvB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACvB,eAAO,CAAC,KAAK,EAAE,CAAC;gBAChB,MAAM;SACb;IACL,CAAC;CACJ;AAzDD,wCAyDC;AAEY,QAAA,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;AAE5C,eAAO,CAAC,UAAU,EAAE,CAAC;AACrB,eAAO,CAAC,KAAK,EAAE,CAAC","file":"cluster.js","sourcesContent":["import { fork } from \"child_process\";\nimport { join } from \"path\";\n\nexport class ClusterStarter {\n    protected bootstrap = join(\n        process.cwd(),\n        \"node_modules\",\n        \"@notadd\",\n        \"server\",\n        \"bootstrap.js\",\n    );\n\n    protected child: any;\n\n    protected pid: number;\n\n    public initialize() {\n        process.on(\"SIGINT\", () => {\n            console.log(\"Received Message: SIGINT.\");\n            this.child.kill();\n            process.exit(0);\n        });\n        process.on(\"SIGTERM\", () => {\n            console.log(\"Received Message: SIGTERM.\");\n            this.child.kill(\"SIGTERM\");\n            process.exit(0);\n        });\n    }\n\n    public start() {\n        this.child = fork(this.bootstrap, [\n            \"--no-daemon\",\n            \"--no-silent\",\n        ], {\n            env: process.env,\n            cwd: process.cwd(),\n            stdio: [\n                process.stdin,\n                process.stdout,\n                process.stderr,\n                \"ipc\",\n            ],\n        });\n        this.pid = this.child.pid;\n        console.log(\"Start server on pid: \" + this.pid);\n        this.child.on(\"message\", this.message);\n    }\n\n    protected message(message: { action: string }) {\n        console.log(\"Received Message: \" + JSON.stringify(message));\n        console.log(message.action);\n        switch (message.action) {\n            case \"restart\":\n                console.log(\"restarting...\");\n                this.child = undefined;\n                process.kill(this.pid);\n                Cluster.start();\n                break;\n        }\n    }\n}\n\nexport const Cluster = new ClusterStarter();\n\nCluster.initialize();\nCluster.start();\n"]}